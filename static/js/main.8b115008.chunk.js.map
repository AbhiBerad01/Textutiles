{"version":3,"sources":["components/Navbar.js","components/TextArea.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleNewChange","role","htmlFor","toggleChange","TextArea","counter","useState","text","setText","split","length","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","newtext","document","getElementById","select","navigator","clipboard","writeText","join","Alert","alert","tag","word","lower","charAt","slice","capitalize","msg","App","setMode","newmode","setNewMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8b115008.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n       \r\n        \r\n      </ul>\r\n      <div className=\"form-check form-switch\">\r\n            <input className=\"form-check-input\" onClick={props.toggleNewChange} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className={`form-check-label text-${props.mode==='dark'?'light':'dark'}`} htmlFor=\"flexSwitchCheckDefault\">Enable Green Mode</label>\r\n        </div>\r\n      <div className=\"form-check form-switch mx-2\">\r\n            <input className=\"form-check-input\" onClick={props.toggleChange} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className={`form-check-label text-${props.mode==='dark'?'light':'dark'}`} htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n        </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n\r\n}","import React, { useState } from 'react'\r\n//first to use state varible we import state \r\n\r\n//Here is the imp part is text is variable for the what is in textarea\r\n//if we change text area the change is saved not in the same text variable  but in setText Variable\r\nexport default function TextArea(props) {\r\n    const [text,setText] = useState(\"\");\r\n    //this is the ''hooks'' we use in react which provide us all class based feature in fuction based arc\r\n    //here the default value of text is set using hook and usestate\r\n    //and the change is catured in setText\r\n    const handleOnChange = (event) =>{\r\n        setText(event.target.value)\r\n        //when change is occure in text area i.e in text variable we use this fuction which fire an event which cature in this fuction\r\n        //here the change in text catured in setText using event.target\r\n    }\r\n\r\n    const handleUpperCase = () =>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Text changes to Upper Case\",\"success\")\r\n        //our goal is to uppercase the text hece we access the changed text do it in upper case and save in new variable and assign in the setText \r\n    }\r\n    const handleLowerCase = () =>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Text changes to Lower Case\",\"success\")\r\n    }\r\n    const clearText = () =>{\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text get Cleared\",\"success\")\r\n    }\r\n    const copyText = () =>{\r\n        let newtext = document.getElementById(\"text\")\r\n        newtext.select();\r\n        navigator.clipboard.writeText(newtext.value);\r\n        props.showAlert(\"Text Copied to Clipboard\",\"success\")\r\n    }\r\n    const removeExtraSpace = () =>{\r\n        let newText = text.split(/[ ]+/)\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Spaces get Removed\",\"success\")\r\n    }\r\n    let counter;\r\n    if (text === \"\")\r\n    {\r\n        counter = 0;\r\n    }\r\n    else{\r\n        counter =text.split(\" \").length; \r\n\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"container my-3\">\r\n                <h2 style={{color:props.mode==='dark'?'white':'black'}}>{props.heading}</h2>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#191970':'white',color:props.mode==='dark'?'white':'#191970'}} id=\"text\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleUpperCase} >UpperCase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleLowerCase} >LowerCase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={clearText} >Clear Text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={copyText} >Copy Text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={removeExtraSpace} >Remove extra spaces</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n                <hr />\r\n                <h3>Text Summary</h3>\r\n                <p>{counter} Words and {text.length} Characters</p>\r\n                <p>{counter*0.008} min to read</p>\r\n                <hr />\r\n                <h3>Preview your Text</h3>\r\n                <div id=\"preview\">\r\n              <pre>  <p>{text}</p></pre>\r\n              </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) =>{\r\n         const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n       props.alert&& <div className={`alert alert-${props.alert.tag} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.tag) } : </strong>{props.alert.msg}\r\n</div>\r\n    )\r\n}\r\n","import Navbar from './components/Navbar';\nimport './App.css';\nimport TextArea from './components/TextArea';\n// import About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\n\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [newmode, setNewMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n  const showAlert = (message,tag) =>{\n    setAlert({\n      msg : message,\n      tag : tag\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleChange = () =>{\n    if(mode==='light'){\n      setMode('dark')\n      document.body.style.backgroundColor = ('#191970')\n      showAlert(\"dark mode enabled\",\"success\")\n    }else{\n      setMode('light')\n      document.body.style.backgroundColor = ('white')\n      showAlert(\"light mode enabled\",\"success\")\n    }\n  }\n  const toggleNewChange = () =>{\n    if(newmode==='light'){\n      setNewMode('dark')\n      document.body.style.backgroundColor = ('green')\n      showAlert(\"dark mode enabled\",\"success\")\n    }else{\n      setNewMode('light')\n      document.body.style.backgroundColor = ('white')\n      showAlert(\"light mode enabled\",\"success\")\n    }\n  }\n  return (\n    <>\n    {/* //  <Router> */}\n    <Navbar title='TextUtils' mode={mode} toggleChange={toggleChange} toggleNewChange={toggleNewChange}/>\n    <Alert alert={alert}/>\n    <TextArea heading=\"Enter Text below to Analize\" showAlert={showAlert} mode={mode}/>}\n   \n        {/* // <Routes> */}\n          {/* // <Route exact path=\"/\" element={/> */}\n          {/* // <Route exact path=\"/about\" element={<About />}/> */}\n        {/* </Routes> */}\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}